var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['core/aifish'], function(AIFish) {
  var FishGame;
  return FishGame = (function(_super) {

    __extends(FishGame, _super);

    FishGame.prototype.entities = [];

    FishGame.prototype.mode = {
      current: 'move',
      move: function(dt) {}
    };

    function FishGame() {
      var i, makeFish;
      makeFish = function() {
        return new AIFish({
          x: $$.R(50, 300),
          y: $$.R(50, 300)
        });
      };
      this.entities = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < 11; i = ++_i) {
          _results.push(makeFish());
        }
        return _results;
      })();
    }

    FishGame.prototype.update = function(dt) {
      this.mode[this.mode.current].apply(this, [dt]);
      return this.updateFish();
    };

    FishGame.prototype.updateFish = function() {
      var e, _i, _len, _ref, _results;
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        _results.push(e.chaseMouse());
      }
      return _results;
    };

    FishGame.prototype.draw = function() {
      var e, _i, _len, _ref, _results;
      atom.context.clear();
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        _results.push(e.draw());
      }
      return _results;
    };

    FishGame.prototype.user = {
      lastMouse: {
        x: 0,
        y: 0
      }
    };

    return FishGame;

  })(atom.Game);
});

// Generated by CoffeeScript 1.5.0-pre
