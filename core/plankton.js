// Generated by CoffeeScript 1.4.0

define(function() {
  var Plankton;
  return Plankton = (function() {

    Plankton.prototype.x = 0;

    Plankton.prototype.y = 0;

    Plankton.prototype.PI2 = Math.PI * 2;

    Plankton.prototype.r = 4;

    Plankton.prototype.eaten = false;

    Plankton.prototype.hashable = true;

    Plankton.prototype.frame = 0;

    Plankton.prototype.SPRITE = null;

    Plankton.prototype.SPRITENAME = null;

    Plankton.prototype.GFX = {
      'plankton1': {
        W: 33,
        H: 19
      },
      'plankton2': {
        W: 22,
        H: 26
      },
      'plankton3': {
        W: 14,
        H: 23
      },
      'plankton4': {
        W: 21,
        H: 27
      },
      'plankton5': {
        W: 27,
        H: 27
      },
      'plankton6': {
        W: 20,
        H: 23
      },
      'plankton7': {
        W: 26,
        H: 24
      },
      'plankton8': {
        W: 24,
        H: 23
      },
      'plankton9': {
        W: 21,
        H: 32
      },
      'plankton10': {
        W: 30,
        H: 36
      },
      'plankton11': {
        W: 33,
        H: 28
      }
    };

    Plankton.prototype.NOISES = {
      'plankton1': 1,
      'plankton2': 1,
      'plankton3': 1
    };

    Plankton.prototype.draw = function() {
      var ac, properties;
      ac = atom.context;
      ac.save();
      properties = this.GFX[this.SPRITENAME];
      ac.translate(this.x - (properties.W >> 1), this.y - (properties.H >> 1));
      ac.rotate(this.rotation);
      ac.drawImage(this.SPRITE, 0, 0);
      return ac.restore();
    };

    Plankton.prototype.move = function() {
      if (this.y < 0 || this.x < 0 || this.eaten) {
        return this.move = null;
      } else {
        this.checkHits();
        return this.x += 2 * this.game.current;
      }
    };

    Plankton.prototype.checkHits = function() {
      var bin, entity, _i, _len;
      bin = this.game.hash2d.get(this);
      for (_i = 0, _len = bin.length; _i < _len; _i++) {
        entity = bin[_i];
        if ((entity != null) && this.canHit(entity) && this.hit(entity)) {
          atom.playSound($$.WR(this.NOISES));
          if (entity.eat != null) {
            entity.eat(this);
          }
          this.eaten = true;
          break;
        }
      }
    };

    Plankton.prototype.canHit = function(e) {
      switch (e.constructor.name) {
        case 'Fish':
          return true;
        default:
          return false;
      }
    };

    Plankton.prototype.hit = function(e) {
      var dx, dy;
      dx = e.x - this.x;
      dy = e.y - this.y;
      return dx * dx + dy * dy < this.r2 + e.r2;
    };

    function Plankton(params) {
      var k, s, v;
      for (k in params) {
        v = params[k];
        this[k] = v;
      }
      s = $$.R(1, 11);
      this.frame = $$.R(0, 1);
      this.SPRITENAME = "plankton" + s;
      this.SPRITE = atom.gfx["" + this.SPRITENAME + "n" + ($$.R(1, 2))];
      this.r = this.GFX[this.SPRITENAME].W;
      this.r_2 = this.r >> 1;
      this.r2 = this.r * this.r;
      this.rotation = $$.r(this.PI2);
    }

    return Plankton;

  })();
});
